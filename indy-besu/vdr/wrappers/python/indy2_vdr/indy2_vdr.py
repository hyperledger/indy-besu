

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import asyncio
import platform

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_indy2_vdr_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_indy2_vdr_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_indy2_vdr_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

    def read_c_size_t(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_PANIC:
            return "_UniffiRustCallStatus(CALL_PANIC)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: _UniffiRustBuffer, buf_ptr: *mut _UniffiRustBuffer) -> int`
_UNIFFI_FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(_UniffiRustBuffer))

# UniFFI future continuation
_UNIFFI_FUTURE_CONTINUATION_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_int8)
class _UniffiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See _UniffiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class _UniffiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as _UniffiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    _UniffiPointerManager = _UniffiPointerManagerCPython # type: ignore
else:
    _UniffiPointerManager = _UniffiPointerManagerGeneral # type: ignore
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value
 
    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("indy2_vdr")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 25
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_indy2_vdr_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_indy2_vdr_checksum_func_build_add_validator_transaction() != 55914:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_assign_role_transaction() != 56385:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_create_credential_definition_transaction() != 24865:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_create_did_transaction() != 29513:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_create_schema_transaction() != 46706:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_deactivate_did_transaction() != 53058:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_get_role_transaction() != 3674:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_get_validators_transaction() != 35838:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_has_role_transaction() != 489:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_remove_validator_transaction() != 45162:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_resolve_credential_definition_transaction() != 10672:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_resolve_did_transaction() != 54132:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_resolve_schema_transaction() != 40225:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_revoke_role_transaction() != 53170:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_build_update_did_transaction() != 54041:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_get_role_result() != 51731:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_get_validators_result() != 61890:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_has_role_result() != 31533:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_resolve_credential_definition_result() != 21489:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_resolve_did_result() != 44142:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_parse_resolve_schema_result() != 15844:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_func_ping() != 64337:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_method_ledgerclient_get_receipt() != 47282:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_method_ledgerclient_ping() != 51215:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_method_ledgerclient_submit_transaction() != 65200:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_method_transaction_get_signing_bytes() != 5530:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_method_transaction_set_signature() != 62242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_constructor_ledgerclient_new() != 5980:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_indy2_vdr_checksum_constructor_transaction_new() != 37427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UniffiLib.uniffi_indy2_vdr_fn_clone_ledgerclient.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_clone_ledgerclient.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_free_ledgerclient.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_free_ledgerclient.restype = None
_UniffiLib.uniffi_indy2_vdr_fn_constructor_ledgerclient_new.argtypes = (
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_constructor_ledgerclient_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_get_receipt.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_get_receipt.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_ping.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_ping.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_submit_transaction.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
)
_UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_submit_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_clone_transaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_clone_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_free_transaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_free_transaction.restype = None
_UniffiLib.uniffi_indy2_vdr_fn_constructor_transaction_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_constructor_transaction_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_get_signing_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_get_signing_bytes.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_set_signature.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_set_signature.restype = None
_UniffiLib.uniffi_indy2_vdr_fn_func_build_add_validator_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_add_validator_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_assign_role_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_assign_role_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_credential_definition_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_credential_definition_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_did_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_did_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_schema_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_create_schema_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_deactivate_did_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_deactivate_did_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_get_role_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_get_role_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_get_validators_transaction.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_get_validators_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_has_role_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_has_role_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_remove_validator_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_remove_validator_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_credential_definition_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_credential_definition_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_did_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_did_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_schema_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_schema_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_revoke_role_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_revoke_role_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_build_update_did_transaction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_build_update_did_transaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_role_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_role_result.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_validators_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_validators_result.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_has_role_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_has_role_result.restype = ctypes.c_int8
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_credential_definition_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_credential_definition_result.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_did_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_did_result.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_schema_result.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_schema_result.restype = _UniffiRustBuffer
_UniffiLib.uniffi_indy2_vdr_fn_func_ping.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.uniffi_indy2_vdr_fn_func_ping.restype = ctypes.c_void_p
_UniffiLib.ffi_indy2_vdr_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_indy2_vdr_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_indy2_vdr_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rustbuffer_free.restype = None
_UniffiLib.ffi_indy2_vdr_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u8.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_u8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_u8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i8.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_i8.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_i8.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i8.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u16.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_u16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_u16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i16.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_i16.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_i16.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i16.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_u32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_u32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_i32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_i32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_u64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_u64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_u64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_i64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_i64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_i64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_indy2_vdr_rust_future_poll_f32.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_f32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_f32.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_f32.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_f32.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_indy2_vdr_rust_future_poll_f64.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_f64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_f64.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_f64.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_f64.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_pointer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_pointer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_indy2_vdr_rust_future_poll_void.argtypes = (
    ctypes.c_void_p,
    _UNIFFI_FUTURE_CONTINUATION_T,
    ctypes.c_size_t,
)
_UniffiLib.ffi_indy2_vdr_rust_future_poll_void.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_cancel_void.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_free_void.argtypes = (
    ctypes.c_void_p,
)
_UniffiLib.ffi_indy2_vdr_rust_future_free_void.restype = None
_UniffiLib.ffi_indy2_vdr_rust_future_complete_void.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_indy2_vdr_rust_future_complete_void.restype = None
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_add_validator_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_add_validator_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_assign_role_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_assign_role_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_credential_definition_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_credential_definition_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_did_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_did_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_schema_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_create_schema_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_deactivate_did_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_deactivate_did_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_get_role_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_get_role_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_get_validators_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_get_validators_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_has_role_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_has_role_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_remove_validator_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_remove_validator_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_credential_definition_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_credential_definition_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_did_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_did_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_schema_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_resolve_schema_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_revoke_role_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_revoke_role_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_update_did_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_build_update_did_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_get_role_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_get_role_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_get_validators_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_get_validators_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_has_role_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_has_role_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_credential_definition_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_credential_definition_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_did_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_did_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_schema_result.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_parse_resolve_schema_result.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_func_ping.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_func_ping.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_get_receipt.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_get_receipt.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_ping.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_ping.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_submit_transaction.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_method_ledgerclient_submit_transaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_method_transaction_get_signing_bytes.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_method_transaction_get_signing_bytes.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_method_transaction_set_signature.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_method_transaction_set_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_constructor_ledgerclient_new.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_constructor_ledgerclient_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_indy2_vdr_checksum_constructor_transaction_new.argtypes = (
)
_UniffiLib.uniffi_indy2_vdr_checksum_constructor_transaction_new.restype = ctypes.c_uint16
_UniffiLib.ffi_indy2_vdr_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_indy2_vdr_uniffi_contract_version.restype = ctypes.c_uint32
_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Async support# RustFuturePoll values
_UNIFFI_RUST_FUTURE_POLL_READY = 0
_UNIFFI_RUST_FUTURE_POLL_MAYBE_READY = 1

# Stores futures for _uniffi_continuation_callback
_UniffiContinuationPointerManager = _UniffiPointerManager()

# Continuation callback for async functions
# lift the return value or error and resolve the future, causing the async function to resume.
@_UNIFFI_FUTURE_CONTINUATION_T
def _uniffi_continuation_callback(future_ptr, poll_code):
    (eventloop, future) = _UniffiContinuationPointerManager.release_pointer(future_ptr)
    eventloop.call_soon_threadsafe(_uniffi_set_future_result, future, poll_code)

def _uniffi_set_future_result(future, poll_code):
    if not future.cancelled():
        future.set_result(poll_code)

async def _uniffi_rust_call_async(rust_future, ffi_poll, ffi_complete, ffi_free, lift_func, error_ffi_converter):
    try:
        eventloop = asyncio.get_running_loop()

        # Loop and poll until we see a _UNIFFI_RUST_FUTURE_POLL_READY value
        while True:
            future = eventloop.create_future()
            ffi_poll(
                rust_future,
                _uniffi_continuation_callback,
                _UniffiContinuationPointerManager.new_pointer((eventloop, future)),
            )
            poll_code = await future
            if poll_code == _UNIFFI_RUST_FUTURE_POLL_READY:
                break

        return lift_func(
            _rust_call_with_error(error_ffi_converter, ffi_complete, rust_future)
        )
    finally:
        ffi_free(rust_future)

# Public interface members begin here.


class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)



class LedgerClientProtocol(typing.Protocol):
    def get_receipt(self, hash: "bytes"):
        raise NotImplementedError
    def ping(self, ):
        raise NotImplementedError
    def submit_transaction(self, transaction: "Transaction"):
        raise NotImplementedError

class LedgerClient:

    _pointer: ctypes.c_void_p
    def __init__(self, chain_id: "int",node_address: "str",contract_configs: "typing.List[ContractConfig]"):
        _UniffiConverterUInt64.check_lower(chain_id)
        
        _UniffiConverterString.check_lower(node_address)
        
        _UniffiConverterSequenceTypeContractConfig.check_lower(contract_configs)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_constructor_ledgerclient_new,
        _UniffiConverterUInt64.lower(chain_id),
        _UniffiConverterString.lower(node_address),
        _UniffiConverterSequenceTypeContractConfig.lower(contract_configs))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_free_ledgerclient, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_clone_ledgerclient, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_receipt(self, hash: "bytes"):
        _UniffiConverterBytes.check_lower(hash)
        
        return _uniffi_rust_call_async(
            _UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_get_receipt(
                self._uniffi_clone_pointer(), 
        _UniffiConverterBytes.lower(hash)
            ),
            _UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterString.lift,
            # Error FFI converter
            _UniffiConverterTypeVdrError,
        )





    def ping(self, ):
        return _uniffi_rust_call_async(
            _UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_ping(
                self._uniffi_clone_pointer(), 
            ),
            _UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterTypePingStatus.lift,
            # Error FFI converter
            _UniffiConverterTypeVdrError,
        )





    def submit_transaction(self, transaction: "Transaction"):
        _UniffiConverterTypeTransaction.check_lower(transaction)
        
        return _uniffi_rust_call_async(
            _UniffiLib.uniffi_indy2_vdr_fn_method_ledgerclient_submit_transaction(
                self._uniffi_clone_pointer(), 
        _UniffiConverterTypeTransaction.lower(transaction)
            ),
            _UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer,
            _UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer,
            # lift function
            _UniffiConverterBytes.lift,
            # Error FFI converter
            _UniffiConverterTypeVdrError,
        )




class _UniffiConverterTypeLedgerClient:

    @staticmethod
    def lift(value: int):
        return LedgerClient._make_instance_(value)

    @staticmethod
    def check_lower(value: LedgerClient):
        if not isinstance(value, LedgerClient):
            raise TypeError("Expected LedgerClient instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: LedgerClientProtocol):
        if not isinstance(value, LedgerClient):
            raise TypeError("Expected LedgerClient instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: LedgerClientProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class TransactionProtocol(typing.Protocol):
    """Transaction object"""

    def get_signing_bytes(self, ):
        raise NotImplementedError
    def set_signature(self, signature_data: "SignatureData"):
        raise NotImplementedError

class Transaction:
    """Transaction object"""


    _pointer: ctypes.c_void_p
    def __init__(self, type: "TransactionType",_from: "typing.Optional[Address]",to: "str",chain_id: "int",data: "bytes",nonce: "typing.Optional[typing.List[int]]",signature: "typing.Optional[SignatureData]"):
        _UniffiConverterTypeTransactionType.check_lower(type)
        
        _UniffiConverterOptionalTypeAddress.check_lower(_from)
        
        _UniffiConverterString.check_lower(to)
        
        _UniffiConverterUInt64.check_lower(chain_id)
        
        _UniffiConverterBytes.check_lower(data)
        
        _UniffiConverterOptionalSequenceUInt64.check_lower(nonce)
        
        _UniffiConverterOptionalTypeSignatureData.check_lower(signature)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_constructor_transaction_new,
        _UniffiConverterTypeTransactionType.lower(type),
        _UniffiConverterOptionalTypeAddress.lower(_from),
        _UniffiConverterString.lower(to),
        _UniffiConverterUInt64.lower(chain_id),
        _UniffiConverterBytes.lower(data),
        _UniffiConverterOptionalSequenceUInt64.lower(nonce),
        _UniffiConverterOptionalTypeSignatureData.lower(signature))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_free_transaction, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_clone_transaction, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def get_signing_bytes(self, ) -> "bytes":
        return _UniffiConverterBytes.lift(
            _rust_call_with_error(
    _UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_get_signing_bytes,self._uniffi_clone_pointer(),)
        )






    def set_signature(self, signature_data: "SignatureData"):
        _UniffiConverterTypeSignatureData.check_lower(signature_data)
        
        _rust_call(_UniffiLib.uniffi_indy2_vdr_fn_method_transaction_set_signature,self._uniffi_clone_pointer(),
        _UniffiConverterTypeSignatureData.lower(signature_data))






class _UniffiConverterTypeTransaction:

    @staticmethod
    def lift(value: int):
        return Transaction._make_instance_(value)

    @staticmethod
    def check_lower(value: Transaction):
        if not isinstance(value, Transaction):
            raise TypeError("Expected Transaction instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: TransactionProtocol):
        if not isinstance(value, Transaction):
            raise TypeError("Expected Transaction instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: TransactionProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class Address:
    value: "str"
    @typing.no_type_check
    def __init__(self, value: "str"):
        self.value = value

    def __str__(self):
        return "Address(value={})".format(self.value)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeAddress(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Address(
            value=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.value, buf)


class ContractConfig:
    """Contract configuration"""

    address: "str"
    """Address of deployed contract"""

    spec_path: "typing.Optional[str]"
    """Contract ABI specification"""

    spec: "typing.Optional[ContractSpec]"
    """Contract ABI specification"""

    @typing.no_type_check
    def __init__(self, address: "str", spec_path: "typing.Optional[str]", spec: "typing.Optional[ContractSpec]"):
        self.address = address
        self.spec_path = spec_path
        self.spec = spec

    def __str__(self):
        return "ContractConfig(address={}, spec_path={}, spec={})".format(self.address, self.spec_path, self.spec)

    def __eq__(self, other):
        if self.address != other.address:
            return False
        if self.spec_path != other.spec_path:
            return False
        if self.spec != other.spec:
            return False
        return True

class _UniffiConverterTypeContractConfig(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ContractConfig(
            address=_UniffiConverterString.read(buf),
            spec_path=_UniffiConverterOptionalString.read(buf),
            spec=_UniffiConverterOptionalTypeContractSpec.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.address)
        _UniffiConverterOptionalString.check_lower(value.spec_path)
        _UniffiConverterOptionalTypeContractSpec.check_lower(value.spec)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.address, buf)
        _UniffiConverterOptionalString.write(value.spec_path, buf)
        _UniffiConverterOptionalTypeContractSpec.write(value.spec, buf)


class ContractSpec:
    """Contract ABI specification"""

    name: "str"
    """Name of contract"""

    abi: "JsonValue"
    """Contract ABI itself"""

    @typing.no_type_check
    def __init__(self, name: "str", abi: "JsonValue"):
        self.name = name
        self.abi = abi

    def __str__(self):
        return "ContractSpec(name={}, abi={})".format(self.name, self.abi)

    def __eq__(self, other):
        if self.name != other.name:
            return False
        if self.abi != other.abi:
            return False
        return True

class _UniffiConverterTypeContractSpec(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ContractSpec(
            name=_UniffiConverterString.read(buf),
            abi=_UniffiConverterTypeJsonValue.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterTypeJsonValue.check_lower(value.abi)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterTypeJsonValue.write(value.abi, buf)


class CredentialDefinition:
    id: "CredentialDefinitionId"
    issuer_id: "Did"
    schema_id: "SchemaId"
    cred_def_type: "str"
    tag: "str"
    value: "JsonValue"
    @typing.no_type_check
    def __init__(self, id: "CredentialDefinitionId", issuer_id: "Did", schema_id: "SchemaId", cred_def_type: "str", tag: "str", value: "JsonValue"):
        self.id = id
        self.issuer_id = issuer_id
        self.schema_id = schema_id
        self.cred_def_type = cred_def_type
        self.tag = tag
        self.value = value

    def __str__(self):
        return "CredentialDefinition(id={}, issuer_id={}, schema_id={}, cred_def_type={}, tag={}, value={})".format(self.id, self.issuer_id, self.schema_id, self.cred_def_type, self.tag, self.value)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.issuer_id != other.issuer_id:
            return False
        if self.schema_id != other.schema_id:
            return False
        if self.cred_def_type != other.cred_def_type:
            return False
        if self.tag != other.tag:
            return False
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeCredentialDefinition(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CredentialDefinition(
            id=_UniffiConverterTypeCredentialDefinitionId.read(buf),
            issuer_id=_UniffiConverterTypeDID.read(buf),
            schema_id=_UniffiConverterTypeSchemaId.read(buf),
            cred_def_type=_UniffiConverterString.read(buf),
            tag=_UniffiConverterString.read(buf),
            value=_UniffiConverterTypeJsonValue.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeCredentialDefinitionId.check_lower(value.id)
        _UniffiConverterTypeDID.check_lower(value.issuer_id)
        _UniffiConverterTypeSchemaId.check_lower(value.schema_id)
        _UniffiConverterString.check_lower(value.cred_def_type)
        _UniffiConverterString.check_lower(value.tag)
        _UniffiConverterTypeJsonValue.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeCredentialDefinitionId.write(value.id, buf)
        _UniffiConverterTypeDID.write(value.issuer_id, buf)
        _UniffiConverterTypeSchemaId.write(value.schema_id, buf)
        _UniffiConverterString.write(value.cred_def_type, buf)
        _UniffiConverterString.write(value.tag, buf)
        _UniffiConverterTypeJsonValue.write(value.value, buf)


class CredentialDefinitionId:
    value: "str"
    @typing.no_type_check
    def __init__(self, value: "str"):
        self.value = value

    def __str__(self):
        return "CredentialDefinitionId(value={})".format(self.value)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeCredentialDefinitionId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CredentialDefinitionId(
            value=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.value, buf)


class CredentialDefinitionMetadata:
    created: "int"
    @typing.no_type_check
    def __init__(self, created: "int"):
        self.created = created

    def __str__(self):
        return "CredentialDefinitionMetadata(created={})".format(self.created)

    def __eq__(self, other):
        if self.created != other.created:
            return False
        return True

class _UniffiConverterTypeCredentialDefinitionMetadata(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CredentialDefinitionMetadata(
            created=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.created)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.created, buf)


class CredentialDefinitionWithMeta:
    credential_definition: "CredentialDefinition"
    metadata: "CredentialDefinitionMetadata"
    @typing.no_type_check
    def __init__(self, credential_definition: "CredentialDefinition", metadata: "CredentialDefinitionMetadata"):
        self.credential_definition = credential_definition
        self.metadata = metadata

    def __str__(self):
        return "CredentialDefinitionWithMeta(credential_definition={}, metadata={})".format(self.credential_definition, self.metadata)

    def __eq__(self, other):
        if self.credential_definition != other.credential_definition:
            return False
        if self.metadata != other.metadata:
            return False
        return True

class _UniffiConverterTypeCredentialDefinitionWithMeta(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CredentialDefinitionWithMeta(
            credential_definition=_UniffiConverterTypeCredentialDefinition.read(buf),
            metadata=_UniffiConverterTypeCredentialDefinitionMetadata.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeCredentialDefinition.check_lower(value.credential_definition)
        _UniffiConverterTypeCredentialDefinitionMetadata.check_lower(value.metadata)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeCredentialDefinition.write(value.credential_definition, buf)
        _UniffiConverterTypeCredentialDefinitionMetadata.write(value.metadata, buf)


class Did:
    value: "str"
    @typing.no_type_check
    def __init__(self, value: "str"):
        self.value = value

    def __str__(self):
        return "Did(value={})".format(self.value)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeDID(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Did(
            value=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.value, buf)


class DidDocument:
    context: "StringOrVector"
    id: "Did"
    controller: "StringOrVector"
    verification_method: "typing.List[VerificationMethod]"
    authentication: "typing.List[VerificationMethodOrReference]"
    assertion_method: "typing.List[VerificationMethodOrReference]"
    capability_invocation: "typing.List[VerificationMethodOrReference]"
    capability_delegation: "typing.List[VerificationMethodOrReference]"
    key_agreement: "typing.List[VerificationMethodOrReference]"
    service: "typing.List[Service]"
    also_known_as: "typing.Optional[typing.List[str]]"
    @typing.no_type_check
    def __init__(self, context: "StringOrVector", id: "Did", controller: "StringOrVector", verification_method: "typing.List[VerificationMethod]", authentication: "typing.List[VerificationMethodOrReference]", assertion_method: "typing.List[VerificationMethodOrReference]", capability_invocation: "typing.List[VerificationMethodOrReference]", capability_delegation: "typing.List[VerificationMethodOrReference]", key_agreement: "typing.List[VerificationMethodOrReference]", service: "typing.List[Service]", also_known_as: "typing.Optional[typing.List[str]]"):
        self.context = context
        self.id = id
        self.controller = controller
        self.verification_method = verification_method
        self.authentication = authentication
        self.assertion_method = assertion_method
        self.capability_invocation = capability_invocation
        self.capability_delegation = capability_delegation
        self.key_agreement = key_agreement
        self.service = service
        self.also_known_as = also_known_as

    def __str__(self):
        return "DidDocument(context={}, id={}, controller={}, verification_method={}, authentication={}, assertion_method={}, capability_invocation={}, capability_delegation={}, key_agreement={}, service={}, also_known_as={})".format(self.context, self.id, self.controller, self.verification_method, self.authentication, self.assertion_method, self.capability_invocation, self.capability_delegation, self.key_agreement, self.service, self.also_known_as)

    def __eq__(self, other):
        if self.context != other.context:
            return False
        if self.id != other.id:
            return False
        if self.controller != other.controller:
            return False
        if self.verification_method != other.verification_method:
            return False
        if self.authentication != other.authentication:
            return False
        if self.assertion_method != other.assertion_method:
            return False
        if self.capability_invocation != other.capability_invocation:
            return False
        if self.capability_delegation != other.capability_delegation:
            return False
        if self.key_agreement != other.key_agreement:
            return False
        if self.service != other.service:
            return False
        if self.also_known_as != other.also_known_as:
            return False
        return True

class _UniffiConverterTypeDidDocument(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DidDocument(
            context=_UniffiConverterTypeStringOrVector.read(buf),
            id=_UniffiConverterTypeDID.read(buf),
            controller=_UniffiConverterTypeStringOrVector.read(buf),
            verification_method=_UniffiConverterSequenceTypeVerificationMethod.read(buf),
            authentication=_UniffiConverterSequenceTypeVerificationMethodOrReference.read(buf),
            assertion_method=_UniffiConverterSequenceTypeVerificationMethodOrReference.read(buf),
            capability_invocation=_UniffiConverterSequenceTypeVerificationMethodOrReference.read(buf),
            capability_delegation=_UniffiConverterSequenceTypeVerificationMethodOrReference.read(buf),
            key_agreement=_UniffiConverterSequenceTypeVerificationMethodOrReference.read(buf),
            service=_UniffiConverterSequenceTypeService.read(buf),
            also_known_as=_UniffiConverterOptionalSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeStringOrVector.check_lower(value.context)
        _UniffiConverterTypeDID.check_lower(value.id)
        _UniffiConverterTypeStringOrVector.check_lower(value.controller)
        _UniffiConverterSequenceTypeVerificationMethod.check_lower(value.verification_method)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.check_lower(value.authentication)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.check_lower(value.assertion_method)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.check_lower(value.capability_invocation)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.check_lower(value.capability_delegation)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.check_lower(value.key_agreement)
        _UniffiConverterSequenceTypeService.check_lower(value.service)
        _UniffiConverterOptionalSequenceString.check_lower(value.also_known_as)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeStringOrVector.write(value.context, buf)
        _UniffiConverterTypeDID.write(value.id, buf)
        _UniffiConverterTypeStringOrVector.write(value.controller, buf)
        _UniffiConverterSequenceTypeVerificationMethod.write(value.verification_method, buf)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.write(value.authentication, buf)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.write(value.assertion_method, buf)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.write(value.capability_invocation, buf)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.write(value.capability_delegation, buf)
        _UniffiConverterSequenceTypeVerificationMethodOrReference.write(value.key_agreement, buf)
        _UniffiConverterSequenceTypeService.write(value.service, buf)
        _UniffiConverterOptionalSequenceString.write(value.also_known_as, buf)


class DidDocumentWithMeta:
    document: "DidDocument"
    metadata: "DidMetadata"
    @typing.no_type_check
    def __init__(self, document: "DidDocument", metadata: "DidMetadata"):
        self.document = document
        self.metadata = metadata

    def __str__(self):
        return "DidDocumentWithMeta(document={}, metadata={})".format(self.document, self.metadata)

    def __eq__(self, other):
        if self.document != other.document:
            return False
        if self.metadata != other.metadata:
            return False
        return True

class _UniffiConverterTypeDidDocumentWithMeta(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DidDocumentWithMeta(
            document=_UniffiConverterTypeDidDocument.read(buf),
            metadata=_UniffiConverterTypeDidMetadata.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeDidDocument.check_lower(value.document)
        _UniffiConverterTypeDidMetadata.check_lower(value.metadata)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeDidDocument.write(value.document, buf)
        _UniffiConverterTypeDidMetadata.write(value.metadata, buf)


class DidMetadata:
    creator: "Address"
    created: "int"
    updated: "int"
    deactivated: "bool"
    @typing.no_type_check
    def __init__(self, creator: "Address", created: "int", updated: "int", deactivated: "bool"):
        self.creator = creator
        self.created = created
        self.updated = updated
        self.deactivated = deactivated

    def __str__(self):
        return "DidMetadata(creator={}, created={}, updated={}, deactivated={})".format(self.creator, self.created, self.updated, self.deactivated)

    def __eq__(self, other):
        if self.creator != other.creator:
            return False
        if self.created != other.created:
            return False
        if self.updated != other.updated:
            return False
        if self.deactivated != other.deactivated:
            return False
        return True

class _UniffiConverterTypeDidMetadata(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DidMetadata(
            creator=_UniffiConverterTypeAddress.read(buf),
            created=_UniffiConverterUInt64.read(buf),
            updated=_UniffiConverterUInt64.read(buf),
            deactivated=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeAddress.check_lower(value.creator)
        _UniffiConverterUInt64.check_lower(value.created)
        _UniffiConverterUInt64.check_lower(value.updated)
        _UniffiConverterBool.check_lower(value.deactivated)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeAddress.write(value.creator, buf)
        _UniffiConverterUInt64.write(value.created, buf)
        _UniffiConverterUInt64.write(value.updated, buf)
        _UniffiConverterBool.write(value.deactivated, buf)


class PingStatus:
    """Ledger status:  whether connected node and network are alive"""

    status: "Status"
    @typing.no_type_check
    def __init__(self, status: "Status"):
        self.status = status

    def __str__(self):
        return "PingStatus(status={})".format(self.status)

    def __eq__(self, other):
        if self.status != other.status:
            return False
        return True

class _UniffiConverterTypePingStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PingStatus(
            status=_UniffiConverterTypeStatus.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeStatus.check_lower(value.status)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeStatus.write(value.status, buf)


class Schema:
    id: "SchemaId"
    issuer_id: "Did"
    name: "str"
    version: "str"
    attr_names: "typing.List[str]"
    @typing.no_type_check
    def __init__(self, id: "SchemaId", issuer_id: "Did", name: "str", version: "str", attr_names: "typing.List[str]"):
        self.id = id
        self.issuer_id = issuer_id
        self.name = name
        self.version = version
        self.attr_names = attr_names

    def __str__(self):
        return "Schema(id={}, issuer_id={}, name={}, version={}, attr_names={})".format(self.id, self.issuer_id, self.name, self.version, self.attr_names)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.issuer_id != other.issuer_id:
            return False
        if self.name != other.name:
            return False
        if self.version != other.version:
            return False
        if self.attr_names != other.attr_names:
            return False
        return True

class _UniffiConverterTypeSchema(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Schema(
            id=_UniffiConverterTypeSchemaId.read(buf),
            issuer_id=_UniffiConverterTypeDID.read(buf),
            name=_UniffiConverterString.read(buf),
            version=_UniffiConverterString.read(buf),
            attr_names=_UniffiConverterSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeSchemaId.check_lower(value.id)
        _UniffiConverterTypeDID.check_lower(value.issuer_id)
        _UniffiConverterString.check_lower(value.name)
        _UniffiConverterString.check_lower(value.version)
        _UniffiConverterSequenceString.check_lower(value.attr_names)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeSchemaId.write(value.id, buf)
        _UniffiConverterTypeDID.write(value.issuer_id, buf)
        _UniffiConverterString.write(value.name, buf)
        _UniffiConverterString.write(value.version, buf)
        _UniffiConverterSequenceString.write(value.attr_names, buf)


class SchemaId:
    value: "str"
    @typing.no_type_check
    def __init__(self, value: "str"):
        self.value = value

    def __str__(self):
        return "SchemaId(value={})".format(self.value)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        return True

class _UniffiConverterTypeSchemaId(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SchemaId(
            value=_UniffiConverterString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.value)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.value, buf)


class SchemaMetadata:
    created: "int"
    @typing.no_type_check
    def __init__(self, created: "int"):
        self.created = created

    def __str__(self):
        return "SchemaMetadata(created={})".format(self.created)

    def __eq__(self, other):
        if self.created != other.created:
            return False
        return True

class _UniffiConverterTypeSchemaMetadata(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SchemaMetadata(
            created=_UniffiConverterUInt64.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.created)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.created, buf)


class SchemaWithMeta:
    schema: "Schema"
    metadata: "SchemaMetadata"
    @typing.no_type_check
    def __init__(self, schema: "Schema", metadata: "SchemaMetadata"):
        self.schema = schema
        self.metadata = metadata

    def __str__(self):
        return "SchemaWithMeta(schema={}, metadata={})".format(self.schema, self.metadata)

    def __eq__(self, other):
        if self.schema != other.schema:
            return False
        if self.metadata != other.metadata:
            return False
        return True

class _UniffiConverterTypeSchemaWithMeta(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SchemaWithMeta(
            schema=_UniffiConverterTypeSchema.read(buf),
            metadata=_UniffiConverterTypeSchemaMetadata.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeSchema.check_lower(value.schema)
        _UniffiConverterTypeSchemaMetadata.check_lower(value.metadata)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeSchema.write(value.schema, buf)
        _UniffiConverterTypeSchemaMetadata.write(value.metadata, buf)


class Service:
    id: "str"
    type: "str"
    service_endpoint: "ServiceEndpoint"
    @typing.no_type_check
    def __init__(self, id: "str", type: "str", service_endpoint: "ServiceEndpoint"):
        self.id = id
        self.type = type
        self.service_endpoint = service_endpoint

    def __str__(self):
        return "Service(id={}, type={}, service_endpoint={})".format(self.id, self.type, self.service_endpoint)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.type != other.type:
            return False
        if self.service_endpoint != other.service_endpoint:
            return False
        return True

class _UniffiConverterTypeService(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Service(
            id=_UniffiConverterString.read(buf),
            type=_UniffiConverterString.read(buf),
            service_endpoint=_UniffiConverterTypeServiceEndpoint.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterString.check_lower(value.type)
        _UniffiConverterTypeServiceEndpoint.check_lower(value.service_endpoint)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterString.write(value.type, buf)
        _UniffiConverterTypeServiceEndpoint.write(value.service_endpoint, buf)


class ServiceEndpointObject:
    uri: "str"
    accept: "typing.List[str]"
    routing_keys: "typing.List[str]"
    @typing.no_type_check
    def __init__(self, uri: "str", accept: "typing.List[str]", routing_keys: "typing.List[str]"):
        self.uri = uri
        self.accept = accept
        self.routing_keys = routing_keys

    def __str__(self):
        return "ServiceEndpointObject(uri={}, accept={}, routing_keys={})".format(self.uri, self.accept, self.routing_keys)

    def __eq__(self, other):
        if self.uri != other.uri:
            return False
        if self.accept != other.accept:
            return False
        if self.routing_keys != other.routing_keys:
            return False
        return True

class _UniffiConverterTypeServiceEndpointObject(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ServiceEndpointObject(
            uri=_UniffiConverterString.read(buf),
            accept=_UniffiConverterSequenceString.read(buf),
            routing_keys=_UniffiConverterSequenceString.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.uri)
        _UniffiConverterSequenceString.check_lower(value.accept)
        _UniffiConverterSequenceString.check_lower(value.routing_keys)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.uri, buf)
        _UniffiConverterSequenceString.write(value.accept, buf)
        _UniffiConverterSequenceString.write(value.routing_keys, buf)


class SignatureData:
    recovery_id: "int"
    """recovery ID using for public key recovery"""

    signature: "bytes"
    """ECDSA signature"""

    @typing.no_type_check
    def __init__(self, recovery_id: "int", signature: "bytes"):
        self.recovery_id = recovery_id
        self.signature = signature

    def __str__(self):
        return "SignatureData(recovery_id={}, signature={})".format(self.recovery_id, self.signature)

    def __eq__(self, other):
        if self.recovery_id != other.recovery_id:
            return False
        if self.signature != other.signature:
            return False
        return True

class _UniffiConverterTypeSignatureData(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SignatureData(
            recovery_id=_UniffiConverterUInt64.read(buf),
            signature=_UniffiConverterBytes.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt64.check_lower(value.recovery_id)
        _UniffiConverterBytes.check_lower(value.signature)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt64.write(value.recovery_id, buf)
        _UniffiConverterBytes.write(value.signature, buf)


class VerificationMethod:
    id: "str"
    type: "VerificationKeyType"
    controller: "str"
    verification_key: "VerificationKey"
    @typing.no_type_check
    def __init__(self, id: "str", type: "VerificationKeyType", controller: "str", verification_key: "VerificationKey"):
        self.id = id
        self.type = type
        self.controller = controller
        self.verification_key = verification_key

    def __str__(self):
        return "VerificationMethod(id={}, type={}, controller={}, verification_key={})".format(self.id, self.type, self.controller, self.verification_key)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.type != other.type:
            return False
        if self.controller != other.controller:
            return False
        if self.verification_key != other.verification_key:
            return False
        return True

class _UniffiConverterTypeVerificationMethod(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return VerificationMethod(
            id=_UniffiConverterString.read(buf),
            type=_UniffiConverterTypeVerificationKeyType.read(buf),
            controller=_UniffiConverterString.read(buf),
            verification_key=_UniffiConverterTypeVerificationKey.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypeVerificationKeyType.check_lower(value.type)
        _UniffiConverterString.check_lower(value.controller)
        _UniffiConverterTypeVerificationKey.check_lower(value.verification_key)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypeVerificationKeyType.write(value.type, buf)
        _UniffiConverterString.write(value.controller, buf)
        _UniffiConverterTypeVerificationKey.write(value.verification_key, buf)


class VerificationRelationshipStruct:
    id: "str"
    verification_method: "VerificationMethod"
    @typing.no_type_check
    def __init__(self, id: "str", verification_method: "VerificationMethod"):
        self.id = id
        self.verification_method = verification_method

    def __str__(self):
        return "VerificationRelationshipStruct(id={}, verification_method={})".format(self.id, self.verification_method)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.verification_method != other.verification_method:
            return False
        return True

class _UniffiConverterTypeVerificationRelationshipStruct(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return VerificationRelationshipStruct(
            id=_UniffiConverterString.read(buf),
            verification_method=_UniffiConverterTypeVerificationMethod.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterTypeVerificationMethod.check_lower(value.verification_method)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterTypeVerificationMethod.write(value.verification_method, buf)





class Role(enum.Enum):
    EMPTY = 0
    
    TRUSTEE = 1
    
    ENDORSER = 2
    
    STEWARD = 3
    


class _UniffiConverterTypeRole(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Role.EMPTY
        if variant == 2:
            return Role.TRUSTEE
        if variant == 3:
            return Role.ENDORSER
        if variant == 4:
            return Role.STEWARD
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Role.EMPTY:
            return
        if value == Role.TRUSTEE:
            return
        if value == Role.ENDORSER:
            return
        if value == Role.STEWARD:
            return

    @staticmethod
    def write(value, buf):
        if value == Role.EMPTY:
            buf.write_i32(1)
        if value == Role.TRUSTEE:
            buf.write_i32(2)
        if value == Role.ENDORSER:
            buf.write_i32(3)
        if value == Role.STEWARD:
            buf.write_i32(4)






class ServiceEndpoint:
    def __init__(self):
        raise RuntimeError("ServiceEndpoint cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class STRING:
        value: "str"

        @typing.no_type_check
        def __init__(self,value: "str"):
            
            self.value = value
            

        def __str__(self):
            return "ServiceEndpoint.STRING(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_string():
                return False
            if self.value != other.value:
                return False
            return True
    class OBJECT:
        value: "ServiceEndpointObject"

        @typing.no_type_check
        def __init__(self,value: "ServiceEndpointObject"):
            
            self.value = value
            

        def __str__(self):
            return "ServiceEndpoint.OBJECT(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_object():
                return False
            if self.value != other.value:
                return False
            return True
    class SET:
        value: "typing.List[ServiceEndpoint]"

        @typing.no_type_check
        def __init__(self,value: "typing.List[ServiceEndpoint]"):
            
            self.value = value
            

        def __str__(self):
            return "ServiceEndpoint.SET(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_set():
                return False
            if self.value != other.value:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_string(self) -> bool:
        return isinstance(self, ServiceEndpoint.STRING)
    def is_object(self) -> bool:
        return isinstance(self, ServiceEndpoint.OBJECT)
    def is_set(self) -> bool:
        return isinstance(self, ServiceEndpoint.SET)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ServiceEndpoint.STRING = type("ServiceEndpoint.STRING", (ServiceEndpoint.STRING, ServiceEndpoint,), {})  # type: ignore
ServiceEndpoint.OBJECT = type("ServiceEndpoint.OBJECT", (ServiceEndpoint.OBJECT, ServiceEndpoint,), {})  # type: ignore
ServiceEndpoint.SET = type("ServiceEndpoint.SET", (ServiceEndpoint.SET, ServiceEndpoint,), {})  # type: ignore




class _UniffiConverterTypeServiceEndpoint(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ServiceEndpoint.STRING(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return ServiceEndpoint.OBJECT(
                _UniffiConverterTypeServiceEndpointObject.read(buf),
            )
        if variant == 3:
            return ServiceEndpoint.SET(
                _UniffiConverterSequenceTypeServiceEndpoint.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_string():
            _UniffiConverterString.check_lower(value.value)
            return
        if value.is_object():
            _UniffiConverterTypeServiceEndpointObject.check_lower(value.value)
            return
        if value.is_set():
            _UniffiConverterSequenceTypeServiceEndpoint.check_lower(value.value)
            return

    @staticmethod
    def write(value, buf):
        if value.is_string():
            buf.write_i32(1)
            _UniffiConverterString.write(value.value, buf)
        if value.is_object():
            buf.write_i32(2)
            _UniffiConverterTypeServiceEndpointObject.write(value.value, buf)
        if value.is_set():
            buf.write_i32(3)
            _UniffiConverterSequenceTypeServiceEndpoint.write(value.value, buf)






class Status:
    def __init__(self):
        raise RuntimeError("Status cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class OK:

        @typing.no_type_check
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "Status.OK()".format()

        def __eq__(self, other):
            if not other.is_ok():
                return False
            return True
    class ERR:
        msg: "str"

        @typing.no_type_check
        def __init__(self,msg: "str"):
            
            self.msg = msg
            

        def __str__(self):
            return "Status.ERR(msg={})".format(self.msg)

        def __eq__(self, other):
            if not other.is_err():
                return False
            if self.msg != other.msg:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_ok(self) -> bool:
        return isinstance(self, Status.OK)
    def is_err(self) -> bool:
        return isinstance(self, Status.ERR)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Status.OK = type("Status.OK", (Status.OK, Status,), {})  # type: ignore
Status.ERR = type("Status.ERR", (Status.ERR, Status,), {})  # type: ignore




class _UniffiConverterTypeStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Status.OK(
            )
        if variant == 2:
            return Status.ERR(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_ok():
            return
        if value.is_err():
            _UniffiConverterString.check_lower(value.msg)
            return

    @staticmethod
    def write(value, buf):
        if value.is_ok():
            buf.write_i32(1)
        if value.is_err():
            buf.write_i32(2)
            _UniffiConverterString.write(value.msg, buf)






class StringOrVector:
    def __init__(self):
        raise RuntimeError("StringOrVector cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class STRING:
        value: "str"

        @typing.no_type_check
        def __init__(self,value: "str"):
            
            self.value = value
            

        def __str__(self):
            return "StringOrVector.STRING(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_string():
                return False
            if self.value != other.value:
                return False
            return True
    class VECTOR:
        value: "typing.List[str]"

        @typing.no_type_check
        def __init__(self,value: "typing.List[str]"):
            
            self.value = value
            

        def __str__(self):
            return "StringOrVector.VECTOR(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_vector():
                return False
            if self.value != other.value:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_string(self) -> bool:
        return isinstance(self, StringOrVector.STRING)
    def is_vector(self) -> bool:
        return isinstance(self, StringOrVector.VECTOR)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
StringOrVector.STRING = type("StringOrVector.STRING", (StringOrVector.STRING, StringOrVector,), {})  # type: ignore
StringOrVector.VECTOR = type("StringOrVector.VECTOR", (StringOrVector.VECTOR, StringOrVector,), {})  # type: ignore




class _UniffiConverterTypeStringOrVector(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return StringOrVector.STRING(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return StringOrVector.VECTOR(
                _UniffiConverterSequenceString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_string():
            _UniffiConverterString.check_lower(value.value)
            return
        if value.is_vector():
            _UniffiConverterSequenceString.check_lower(value.value)
            return

    @staticmethod
    def write(value, buf):
        if value.is_string():
            buf.write_i32(1)
            _UniffiConverterString.write(value.value, buf)
        if value.is_vector():
            buf.write_i32(2)
            _UniffiConverterSequenceString.write(value.value, buf)






class TransactionType(enum.Enum):
    """
    Type of transaction: write/read
    depending on the transaction type different client methods will be executed to submit transaction
    """

    READ = 0
    
    WRITE = 1
    


class _UniffiConverterTypeTransactionType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TransactionType.READ
        if variant == 2:
            return TransactionType.WRITE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == TransactionType.READ:
            return
        if value == TransactionType.WRITE:
            return

    @staticmethod
    def write(value, buf):
        if value == TransactionType.READ:
            buf.write_i32(1)
        if value == TransactionType.WRITE:
            buf.write_i32(2)



# VdrError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class VdrError(Exception):
    pass

_UniffiTempVdrError = VdrError

class VdrError:  # type: ignore
    class ClientNodeUnreachable(_UniffiTempVdrError):

        def __init__(self):
            pass
        def __repr__(self):
            return "VdrError.ClientNodeUnreachable({})".format(str(self))
    _UniffiTempVdrError.ClientNodeUnreachable = ClientNodeUnreachable # type: ignore
    class ClientInvalidTransaction(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ClientInvalidTransaction({})".format(str(self))
    _UniffiTempVdrError.ClientInvalidTransaction = ClientInvalidTransaction # type: ignore
    class ClientInvalidResponse(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ClientInvalidResponse({})".format(str(self))
    _UniffiTempVdrError.ClientInvalidResponse = ClientInvalidResponse # type: ignore
    class ClientTransactionReverted(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ClientTransactionReverted({})".format(str(self))
    _UniffiTempVdrError.ClientTransactionReverted = ClientTransactionReverted # type: ignore
    class ClientUnexpectedError(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ClientUnexpectedError({})".format(str(self))
    _UniffiTempVdrError.ClientUnexpectedError = ClientUnexpectedError # type: ignore
    class ClientInvalidState(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ClientInvalidState({})".format(str(self))
    _UniffiTempVdrError.ClientInvalidState = ClientInvalidState # type: ignore
    class ContractInvalidName(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ContractInvalidName({})".format(str(self))
    _UniffiTempVdrError.ContractInvalidName = ContractInvalidName # type: ignore
    class ContractInvalidSpec(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ContractInvalidSpec({})".format(str(self))
    _UniffiTempVdrError.ContractInvalidSpec = ContractInvalidSpec # type: ignore
    class ContractInvalidInputData(_UniffiTempVdrError):

        def __init__(self):
            pass
        def __repr__(self):
            return "VdrError.ContractInvalidInputData({})".format(str(self))
    _UniffiTempVdrError.ContractInvalidInputData = ContractInvalidInputData # type: ignore
    class ContractInvalidResponseData(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.ContractInvalidResponseData({})".format(str(self))
    _UniffiTempVdrError.ContractInvalidResponseData = ContractInvalidResponseData # type: ignore
    class SignerInvalidPrivateKey(_UniffiTempVdrError):

        def __init__(self):
            pass
        def __repr__(self):
            return "VdrError.SignerInvalidPrivateKey({})".format(str(self))
    _UniffiTempVdrError.SignerInvalidPrivateKey = SignerInvalidPrivateKey # type: ignore
    class SignerInvalidMessage(_UniffiTempVdrError):

        def __init__(self):
            pass
        def __repr__(self):
            return "VdrError.SignerInvalidMessage({})".format(str(self))
    _UniffiTempVdrError.SignerInvalidMessage = SignerInvalidMessage # type: ignore
    class SignerMissingKey(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.SignerMissingKey({})".format(str(self))
    _UniffiTempVdrError.SignerMissingKey = SignerMissingKey # type: ignore
    class SignerUnexpectedError(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.SignerUnexpectedError({})".format(str(self))
    _UniffiTempVdrError.SignerUnexpectedError = SignerUnexpectedError # type: ignore
    class CommonInvalidData(_UniffiTempVdrError):

        def __init__(self, msg):
            super().__init__(", ".join([
                "msg={!r}".format(msg),
            ]))
            self.msg = msg
        def __repr__(self):
            return "VdrError.CommonInvalidData({})".format(str(self))
    _UniffiTempVdrError.CommonInvalidData = CommonInvalidData # type: ignore

VdrError = _UniffiTempVdrError # type: ignore
del _UniffiTempVdrError


class _UniffiConverterTypeVdrError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return VdrError.ClientNodeUnreachable(
            )
        if variant == 2:
            return VdrError.ClientInvalidTransaction(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 3:
            return VdrError.ClientInvalidResponse(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 4:
            return VdrError.ClientTransactionReverted(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 5:
            return VdrError.ClientUnexpectedError(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 6:
            return VdrError.ClientInvalidState(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 7:
            return VdrError.ContractInvalidName(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 8:
            return VdrError.ContractInvalidSpec(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 9:
            return VdrError.ContractInvalidInputData(
            )
        if variant == 10:
            return VdrError.ContractInvalidResponseData(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 11:
            return VdrError.SignerInvalidPrivateKey(
            )
        if variant == 12:
            return VdrError.SignerInvalidMessage(
            )
        if variant == 13:
            return VdrError.SignerMissingKey(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 14:
            return VdrError.SignerUnexpectedError(
                msg=_UniffiConverterString.read(buf),
            )
        if variant == 15:
            return VdrError.CommonInvalidData(
                msg=_UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, VdrError.ClientNodeUnreachable):
            return
        if isinstance(value, VdrError.ClientInvalidTransaction):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ClientInvalidResponse):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ClientTransactionReverted):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ClientUnexpectedError):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ClientInvalidState):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ContractInvalidName):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ContractInvalidSpec):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.ContractInvalidInputData):
            return
        if isinstance(value, VdrError.ContractInvalidResponseData):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.SignerInvalidPrivateKey):
            return
        if isinstance(value, VdrError.SignerInvalidMessage):
            return
        if isinstance(value, VdrError.SignerMissingKey):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.SignerUnexpectedError):
            _UniffiConverterString.check_lower(value.msg)
            return
        if isinstance(value, VdrError.CommonInvalidData):
            _UniffiConverterString.check_lower(value.msg)
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, VdrError.ClientNodeUnreachable):
            buf.write_i32(1)
        if isinstance(value, VdrError.ClientInvalidTransaction):
            buf.write_i32(2)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ClientInvalidResponse):
            buf.write_i32(3)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ClientTransactionReverted):
            buf.write_i32(4)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ClientUnexpectedError):
            buf.write_i32(5)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ClientInvalidState):
            buf.write_i32(6)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ContractInvalidName):
            buf.write_i32(7)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ContractInvalidSpec):
            buf.write_i32(8)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.ContractInvalidInputData):
            buf.write_i32(9)
        if isinstance(value, VdrError.ContractInvalidResponseData):
            buf.write_i32(10)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.SignerInvalidPrivateKey):
            buf.write_i32(11)
        if isinstance(value, VdrError.SignerInvalidMessage):
            buf.write_i32(12)
        if isinstance(value, VdrError.SignerMissingKey):
            buf.write_i32(13)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.SignerUnexpectedError):
            buf.write_i32(14)
            _UniffiConverterString.write(value.msg, buf)
        if isinstance(value, VdrError.CommonInvalidData):
            buf.write_i32(15)
            _UniffiConverterString.write(value.msg, buf)





class VerificationKey:
    def __init__(self):
        raise RuntimeError("VerificationKey cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class MULTIBASE:
        public_key_multibase: "str"

        @typing.no_type_check
        def __init__(self,public_key_multibase: "str"):
            
            self.public_key_multibase = public_key_multibase
            

        def __str__(self):
            return "VerificationKey.MULTIBASE(public_key_multibase={})".format(self.public_key_multibase)

        def __eq__(self, other):
            if not other.is_multibase():
                return False
            if self.public_key_multibase != other.public_key_multibase:
                return False
            return True
    class JWK:
        public_key_jwk: "JsonValue"

        @typing.no_type_check
        def __init__(self,public_key_jwk: "JsonValue"):
            
            self.public_key_jwk = public_key_jwk
            

        def __str__(self):
            return "VerificationKey.JWK(public_key_jwk={})".format(self.public_key_jwk)

        def __eq__(self, other):
            if not other.is_jwk():
                return False
            if self.public_key_jwk != other.public_key_jwk:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_multibase(self) -> bool:
        return isinstance(self, VerificationKey.MULTIBASE)
    def is_jwk(self) -> bool:
        return isinstance(self, VerificationKey.JWK)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
VerificationKey.MULTIBASE = type("VerificationKey.MULTIBASE", (VerificationKey.MULTIBASE, VerificationKey,), {})  # type: ignore
VerificationKey.JWK = type("VerificationKey.JWK", (VerificationKey.JWK, VerificationKey,), {})  # type: ignore




class _UniffiConverterTypeVerificationKey(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return VerificationKey.MULTIBASE(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return VerificationKey.JWK(
                _UniffiConverterTypeJsonValue.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_multibase():
            _UniffiConverterString.check_lower(value.public_key_multibase)
            return
        if value.is_jwk():
            _UniffiConverterTypeJsonValue.check_lower(value.public_key_jwk)
            return

    @staticmethod
    def write(value, buf):
        if value.is_multibase():
            buf.write_i32(1)
            _UniffiConverterString.write(value.public_key_multibase, buf)
        if value.is_jwk():
            buf.write_i32(2)
            _UniffiConverterTypeJsonValue.write(value.public_key_jwk, buf)






class VerificationKeyType(enum.Enum):
    ED25519_VERIFICATION_KEY2018 = 0
    
    X25519_KEY_AGREEMENT_KEY2019 = 1
    
    ED25519_VERIFICATION_KEY2020 = 2
    
    X25519_KEY_AGREEMENT_KEY2020 = 3
    
    JSON_WEB_KEY2020 = 4
    
    ECDSA_SECP256K1_VERIFICATION_KEY2019 = 5
    


class _UniffiConverterTypeVerificationKeyType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return VerificationKeyType.ED25519_VERIFICATION_KEY2018
        if variant == 2:
            return VerificationKeyType.X25519_KEY_AGREEMENT_KEY2019
        if variant == 3:
            return VerificationKeyType.ED25519_VERIFICATION_KEY2020
        if variant == 4:
            return VerificationKeyType.X25519_KEY_AGREEMENT_KEY2020
        if variant == 5:
            return VerificationKeyType.JSON_WEB_KEY2020
        if variant == 6:
            return VerificationKeyType.ECDSA_SECP256K1_VERIFICATION_KEY2019
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == VerificationKeyType.ED25519_VERIFICATION_KEY2018:
            return
        if value == VerificationKeyType.X25519_KEY_AGREEMENT_KEY2019:
            return
        if value == VerificationKeyType.ED25519_VERIFICATION_KEY2020:
            return
        if value == VerificationKeyType.X25519_KEY_AGREEMENT_KEY2020:
            return
        if value == VerificationKeyType.JSON_WEB_KEY2020:
            return
        if value == VerificationKeyType.ECDSA_SECP256K1_VERIFICATION_KEY2019:
            return

    @staticmethod
    def write(value, buf):
        if value == VerificationKeyType.ED25519_VERIFICATION_KEY2018:
            buf.write_i32(1)
        if value == VerificationKeyType.X25519_KEY_AGREEMENT_KEY2019:
            buf.write_i32(2)
        if value == VerificationKeyType.ED25519_VERIFICATION_KEY2020:
            buf.write_i32(3)
        if value == VerificationKeyType.X25519_KEY_AGREEMENT_KEY2020:
            buf.write_i32(4)
        if value == VerificationKeyType.JSON_WEB_KEY2020:
            buf.write_i32(5)
        if value == VerificationKeyType.ECDSA_SECP256K1_VERIFICATION_KEY2019:
            buf.write_i32(6)






class VerificationMethodOrReference:
    def __init__(self):
        raise RuntimeError("VerificationMethodOrReference cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class STRING:
        value: "str"

        @typing.no_type_check
        def __init__(self,value: "str"):
            
            self.value = value
            

        def __str__(self):
            return "VerificationMethodOrReference.STRING(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_string():
                return False
            if self.value != other.value:
                return False
            return True
    class VERIFICATION_METHOD:
        value: "VerificationMethod"

        @typing.no_type_check
        def __init__(self,value: "VerificationMethod"):
            
            self.value = value
            

        def __str__(self):
            return "VerificationMethodOrReference.VERIFICATION_METHOD(value={})".format(self.value)

        def __eq__(self, other):
            if not other.is_verification_method():
                return False
            if self.value != other.value:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_string(self) -> bool:
        return isinstance(self, VerificationMethodOrReference.STRING)
    def is_verification_method(self) -> bool:
        return isinstance(self, VerificationMethodOrReference.VERIFICATION_METHOD)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
VerificationMethodOrReference.STRING = type("VerificationMethodOrReference.STRING", (VerificationMethodOrReference.STRING, VerificationMethodOrReference,), {})  # type: ignore
VerificationMethodOrReference.VERIFICATION_METHOD = type("VerificationMethodOrReference.VERIFICATION_METHOD", (VerificationMethodOrReference.VERIFICATION_METHOD, VerificationMethodOrReference,), {})  # type: ignore




class _UniffiConverterTypeVerificationMethodOrReference(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return VerificationMethodOrReference.STRING(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return VerificationMethodOrReference.VERIFICATION_METHOD(
                _UniffiConverterTypeVerificationMethod.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_string():
            _UniffiConverterString.check_lower(value.value)
            return
        if value.is_verification_method():
            _UniffiConverterTypeVerificationMethod.check_lower(value.value)
            return

    @staticmethod
    def write(value, buf):
        if value.is_string():
            buf.write_i32(1)
            _UniffiConverterString.write(value.value, buf)
        if value.is_verification_method():
            buf.write_i32(2)
            _UniffiConverterTypeVerificationMethod.write(value.value, buf)




class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeAddress(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeAddress.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeAddress.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeAddress.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeContractSpec(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeContractSpec.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeContractSpec.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeContractSpec.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeSignatureData(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeSignatureData.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeSignatureData.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeSignatureData.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceUInt64.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceUInt64(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterUInt64.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterUInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterUInt64.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeAddress(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeAddress.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeAddress.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeAddress.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeContractConfig(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeContractConfig.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeContractConfig.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeContractConfig.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeService(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeService.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeService.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeService.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeVerificationMethod(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeVerificationMethod.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeVerificationMethod.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeVerificationMethod.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeServiceEndpoint(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeServiceEndpoint.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeServiceEndpoint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeServiceEndpoint.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeVerificationMethodOrReference(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeVerificationMethodOrReference.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeVerificationMethodOrReference.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeVerificationMethodOrReference.read(buf) for i in range(count)
        ]


# Type alias
JsonValue = str

class _UniffiConverterTypeJsonValue:
    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterString.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterString.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterString.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterString.lower(value)

def build_add_validator_transaction(client: "LedgerClient",_from: "Address",validator_address: "Address"):
    """
    Build transaction to execute ValidatorControl.addValidator contract method to add a new Validator

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `validator_address` validator address to be added

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeAddress.check_lower(validator_address)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_add_validator_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeAddress.lower(validator_address)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_assign_role_transaction(client: "LedgerClient",_from: "Address",role: "Role",account: "Address"):
    """
    Build transaction to execute RoleControl.assignRole contract method to assign a role to an account

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `role` role to assign
    - `account` assignee account

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeRole.check_lower(role)
    
    _UniffiConverterTypeAddress.check_lower(account)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_assign_role_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeRole.lower(role),
        _UniffiConverterTypeAddress.lower(account)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_create_credential_definition_transaction(client: "LedgerClient",_from: "Address",credential_definition: "CredentialDefinition"):
    """
    Build transaction to execute CredentialDefinitionRegistry.createCredentialDefinition contract
    method to create a new Credential Definition

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `credential_definition` Credential Definition object matching to the specification - https://hyperledger.github.io/anoncreds-spec/#term:credential-definition

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeCredentialDefinition.check_lower(credential_definition)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_create_credential_definition_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeCredentialDefinition.lower(credential_definition)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_create_did_transaction(client: "LedgerClient",_from: "Address",did_doc: "DidDocument"):
    """
    Build transaction to execute IndyDidRegistry.createDid contract method to create a new DID

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `did_doc` DID Document matching to the specification: https://www.w3.org/TR/did-core/

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeDidDocument.check_lower(did_doc)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_create_did_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeDidDocument.lower(did_doc)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_create_schema_transaction(client: "LedgerClient",_from: "Address",schema: "Schema"):
    """
    Build transaction to execute SchemaRegistry.createSchema contract method to create a new Schema

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `schema` Schema object matching to the specification - https://hyperledger.github.io/anoncreds-spec/#term:schema

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeSchema.check_lower(schema)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_create_schema_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeSchema.lower(schema)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_deactivate_did_transaction(client: "LedgerClient",_from: "Address",did: "Did"):
    """
    Build transaction to execute IndyDidRegistry.deactivateDid contract method to deactivate an existing DID

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `did` DID to deactivate

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeDID.check_lower(did)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_deactivate_did_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeDID.lower(did)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_get_role_transaction(client: "LedgerClient",account: "Address"):
    """
    Build transaction to execute RoleControl.getRole contract method to get account's role

    # Params
    - `client` client connected to the network where contract will be executed
    - `account` account address

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(account)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_get_role_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(account)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_get_validators_transaction(client: "LedgerClient"):
    """
    Build transaction to execute ValidatorControl.getValidators contract method to get existing validators

    # Params
    - `client` client connected to the network where contract will be executed

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_get_validators_transaction(
        _UniffiConverterTypeLedgerClient.lower(client)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_has_role_transaction(client: "LedgerClient",role: "Role",account: "Address"):
    """
    Build transaction to execute RoleControl.hasRole contract method to check an account has a role

    # Params
    - `client` client connected to the network where contract will be executed
    - `role` role to check
    - `account` account to check

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeRole.check_lower(role)
    
    _UniffiConverterTypeAddress.check_lower(account)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_has_role_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeRole.lower(role),
        _UniffiConverterTypeAddress.lower(account)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_remove_validator_transaction(client: "LedgerClient",_from: "Address",validator_address: "Address"):
    """
    Build transaction to execute ValidatorControl.removeValidator contract method to remove an existing Validator

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `validator_address` validator address to be removed

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeAddress.check_lower(validator_address)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_remove_validator_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeAddress.lower(validator_address)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_resolve_credential_definition_transaction(client: "LedgerClient",id: "CredentialDefinitionId"):
    """
    Build transaction to execute CredentialDefinitionRegistry.resolveCredentialDefinition contract
    method to retrieve an existing Credential Definition by the given id

    # Params
    - `client` client connected to the network where contract will be executed
    - `id` id of Credential Definition to resolve

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeCredentialDefinitionId.check_lower(id)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_credential_definition_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeCredentialDefinitionId.lower(id)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_resolve_did_transaction(client: "LedgerClient",did: "Did"):
    """
    Build transaction to execute IndyDidRegistry.resolveDid contract method to receive a DID Document associated with the DID

    # Params
    - `client` client connected to the network where contract will be executed
    - `did` target DID to receive DID Document

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeDID.check_lower(did)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_did_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeDID.lower(did)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_resolve_schema_transaction(client: "LedgerClient",id: "SchemaId"):
    """
    Build transaction to execute SchemaRegistry.resolveSchema contract method to retrieve an existing Schema by the given id

    # Params
    - `client` client connected to the network where contract will be executed
    - `id` id of Schema to resolve

    # Returns
    Read transaction to submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeSchemaId.check_lower(id)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_resolve_schema_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeSchemaId.lower(id)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_revoke_role_transaction(client: "LedgerClient",_from: "Address",role: "Role",account: "Address"):
    """
    Build transaction to execute RoleControl.revokeRole contract method to revoke a role from an account

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `role` role to assign
    - `account` revokee account

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeRole.check_lower(role)
    
    _UniffiConverterTypeAddress.check_lower(account)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_revoke_role_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeRole.lower(role),
        _UniffiConverterTypeAddress.lower(account)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def build_update_did_transaction(client: "LedgerClient",_from: "Address",did_doc: "DidDocument"):
    """
    Build transaction to execute IndyDidRegistry.updateDid contract method to update DID document for an existing DID

    # Params
    - `client` client connected to the network where contract will be executed
    - `from` transaction sender account address
    - `did_doc` new DID Document matching to the specification: https://www.w3.org/TR/did-core/

    # Returns
    Write transaction to sign and submit
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterTypeAddress.check_lower(_from)
    
    _UniffiConverterTypeDidDocument.check_lower(did_doc)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_build_update_did_transaction(
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterTypeAddress.lower(_from),
        _UniffiConverterTypeDidDocument.lower(did_doc)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_pointer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_pointer,
        # lift function
        _UniffiConverterTypeTransaction.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

def parse_get_role_result(client: "LedgerClient",bytes: "bytes") -> "Role":
    """
    Parse the result of execution RoleControl.GetRole contract method to get account's role

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    Account's role
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeRole.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_role_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def parse_get_validators_result(client: "LedgerClient",bytes: "bytes") -> "typing.List[Address]":
    """
    Parse the result of execution ValidatorControl.getValidators contract method to get existing validators

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    Parsed validator addresses
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterSequenceTypeAddress.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_get_validators_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def parse_has_role_result(client: "LedgerClient",bytes: "bytes") -> "bool":
    """
    Parse the result of execution RoleControl.HasRole contract method to check an account has a role

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    Account has role result
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterBool.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_has_role_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def parse_resolve_credential_definition_result(client: "LedgerClient",bytes: "bytes") -> "CredentialDefinition":
    """
    Parse the result of execution CredentialDefinitionRegistry.resolveCredentialDefinition contract
    method to receive a Credential Definition associated with the id

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    parsed Credential Definition
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeCredentialDefinition.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_credential_definition_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def parse_resolve_did_result(client: "LedgerClient",bytes: "bytes") -> "DidDocument":
    """
    Parse the result of execution IndyDidRegistry.resolveDid contract method to receive a DID Document associated with the DID

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    parsed DID Document
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeDidDocument.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_did_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def parse_resolve_schema_result(client: "LedgerClient",bytes: "bytes") -> "Schema":
    """
    Parse the result of execution SchemaRegistry.resolveSchema contract method to receive a Schema associated with the id

    # Params
    - `client` client connected to the network where contract will be executed
    - `bytes` result bytes returned from the ledger

    # Returns
    parsed Schema
    """

    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeSchema.lift(_rust_call_with_error(_UniffiConverterTypeVdrError,_UniffiLib.uniffi_indy2_vdr_fn_func_parse_resolve_schema_result,
        _UniffiConverterTypeLedgerClient.lower(client),
        _UniffiConverterBytes.lower(bytes)))


def ping(client: "LedgerClient"):
    _UniffiConverterTypeLedgerClient.check_lower(client)
    
    return _uniffi_rust_call_async(
        _UniffiLib.uniffi_indy2_vdr_fn_func_ping(
        _UniffiConverterTypeLedgerClient.lower(client)),
        _UniffiLib.ffi_indy2_vdr_rust_future_poll_rust_buffer,
        _UniffiLib.ffi_indy2_vdr_rust_future_complete_rust_buffer,
        _UniffiLib.ffi_indy2_vdr_rust_future_free_rust_buffer,
        # lift function
        _UniffiConverterTypePingStatus.lift,
        # Error FFI converter
        _UniffiConverterTypeVdrError,
    )

__all__ = [
    "InternalError",
    "Role",
    "ServiceEndpoint",
    "Status",
    "StringOrVector",
    "TransactionType",
    "VdrError",
    "VerificationKey",
    "VerificationKeyType",
    "VerificationMethodOrReference",
    "Address",
    "ContractConfig",
    "ContractSpec",
    "CredentialDefinition",
    "CredentialDefinitionId",
    "CredentialDefinitionMetadata",
    "CredentialDefinitionWithMeta",
    "Did",
    "DidDocument",
    "DidDocumentWithMeta",
    "DidMetadata",
    "PingStatus",
    "Schema",
    "SchemaId",
    "SchemaMetadata",
    "SchemaWithMeta",
    "Service",
    "ServiceEndpointObject",
    "SignatureData",
    "VerificationMethod",
    "VerificationRelationshipStruct",
    "build_add_validator_transaction",
    "build_assign_role_transaction",
    "build_create_credential_definition_transaction",
    "build_create_did_transaction",
    "build_create_schema_transaction",
    "build_deactivate_did_transaction",
    "build_get_role_transaction",
    "build_get_validators_transaction",
    "build_has_role_transaction",
    "build_remove_validator_transaction",
    "build_resolve_credential_definition_transaction",
    "build_resolve_did_transaction",
    "build_resolve_schema_transaction",
    "build_revoke_role_transaction",
    "build_update_did_transaction",
    "parse_get_role_result",
    "parse_get_validators_result",
    "parse_has_role_result",
    "parse_resolve_credential_definition_result",
    "parse_resolve_did_result",
    "parse_resolve_schema_result",
    "ping",
    "LedgerClient",
    "Transaction",
]

